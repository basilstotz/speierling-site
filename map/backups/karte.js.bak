//let offline=false;

///////////////////////////////////////marker////////////////////////////////////////

function pointToLayer(feature, latlng) {
    let color;
    let radius;
    let weight;

    if(feature.properties.project && feature.properties.project.Vermehrungstyp ){
	switch(feature.properties.project.Vermehrungstyp){
	    case 'P':
		color='blue';
		break;
	    case 'U':
		color='green';
		break;
	    case 'N':
		color='green';
		break;
	    case 'TR':
		color='orange';
		break;
	    case 'TS':
		color='red';
		break;
	    default:
		color='yellow'
		break;
        }
    }else{
	color='black'
    }

/***********************************************************

    if(feature.geometry.coordinates){
	let h=Math.round(feature.geometry.coordinates[2]/100.0);
        switch(h){
	case 0:
	    color='black';
	    break;
	case 1:
	    color='dimgrey';
	    break;
	case 2:
	    color='grey';
	    break;
	case 3:
	    color='darkgrey';
	    break;
	case 4:
	    color='silver';
	    break;
	case 5:
	    color='lightgrey';
	    break;
	default:
	    color='white';
	    break;
	}
    }
********************************************************** */

    if (feature.properties.tags && feature.properties.tags.circumference) {
	let c=feature.properties.tags.circumference;
	if(c>5){c=c/100.0}
        //radius=Math.round(1.5*Math.log(1000.0*c));
        radius=Math.round(6.0*Math.sqrt(c));
        //radius=Math.round(4.0*c);
	if(radius<3)radius=3;
	fillOpacity=0.6;
    }else{
	radius=5;
	fillOpacity=0.3;
    }
    if(feature.properties.pictures){
	weight=3;
    }else{
	weight=0;
    }
    //return L.marker(latlng, {icon: Icon[color]});
    return L.circleMarker(latlng,
			  {
			      radius: radius,
			      weight: weight,
			      color: color,
			      opacity: 1.0,
			      fillColor: color,
			      fillOpacity: fillOpacity
			  }
			 );
			  
}



// https://www.npmjs.com/package/leaflet-svg-shape-markers

///////////////////////////////////////popup////////////////////////////////////////


function show_source(id) {
        let theTeam = (this.getElementsByID("span").item(0)).innerHTML;
        map._layers[id].fire('click');
        var coords = map._layers[id]._latlng;
        map.setView(coords);
}; 

function toggleDiv(el){
	if(el.style.display=='none'){
	    el.style.display='block';
	}else{
	    el.style.display='none';
	}
}


// https://gis.stackexchange.com/questions/330608/leaflet-marker-popup-link-from-outside-of-map-dynamically


function onEachFeature(feature, layer) {

    let circumference='';
    let height='';
    let diameter_crown='';
    let start_date='';

    let Vermehrungstyp='';
    let Pflanzjahr='';
    let Herkunft='';
    let Fruechte='';
    let Ort='';
    let Gebiet='';

    let id=feature.properties.id;

    layer._leaflet_id = id;

    /////// project //////////
    let location="";
    let project="";
    if (feature.properties.project) {
	project='<p>';
        location=feature.properties.project.Ort+', '+feature.properties.project.Gebiet;
	let first=true;
	for (const [key, value] of Object.entries(feature.properties.project)) {
            //console.log(`${key}: ${value}`);
		if(key=='Vermehrungstyp'){Vermehrungstyp=value}
		if(key=='Pflanzjahr'){Pflanzjahr=value}
		if(key=='Herkunft'){Herkunft=value}
		if(key=='Fruechte'){Fruechte=value}
		if(key=='Gebiet'){Gebiet=value}
		if(key=='Ort'){Ort=value}
		//if(first){
		//    project+="<b>"+key+":</b> "+value;
		//    first=false;
		//}else{
		//    project+="<br><b>"+key+":</b> "+value;
		//}
        }
	project+='</p>';
    }

    /////// tags /////////////////////////
    let tags="";
    if (feature.properties.tags) {
	tags+='<p>';
	let first=true;
	for (const [key, value] of Object.entries(feature.properties.tags)) {
            //console.log(`${key}: ${value}`);
	    if( ! ( key == 'leaf_cycle' ||  key == 'leaf_type' || key == 'species' || key == 'species:de' || key == 'natural')){
		if(key=='circumference'){
		   if(value>5.0){
		   	circumference=Math.round(value)/100.0;
		   }else{
			circumference=value;
		   }
		}
		if(key=='height'){height=value}
		if(key=='diameter_crown'){diameter_crown=value}
		if(key=='start_date'){start_date=value}

                //new tag propagation ////////////////////////////////////////////////////////

                if(key=='propagation'){
                  switch(value){
                     case 'natural':
                       break;
                     case 'planted':
                       break;
                     case 'localseed':
                       break;
                     case 'localscion':
                       break;
                     default:
                       break; 
                  }
                }

                ////////////////////////////////////////not ready////////////////////////////                 
  
		//if(first){
		//    tags+="<b>"+key+":</b> "+value;
		//    first=false;
		//}else{
		//    tags+="<br><b>"+key+":</b> "+value;
		//}  
		//if(key == 'circumference')tags+=' m';
	    }
        }
	tags+='</p>';
    }


    ///// geometry ///////////////////////    
    dnArray=feature.properties.nominatim.display_name.split(',').slice(1);
    dnString=dnArray.join(', ');
    let name=dnString+'<br>';
    let geometry;
    if(feature.geometry.coordinates){
	let lon=feature.geometry.coordinates[0];
        let lat=feature.geometry.coordinates[1];
	let h=Math.round(feature.geometry.coordinates[2]);
        if(location==''){      
	    location=feature.properties.nominatim.display_name.split(',')[0];     
        }
        geometry='<h5 style="margin-bottom:0px">'+location+'</h6>';
	geometry+=name;
        geometry+='<table id="tabelle">';
	geometry+='<tr><td style="text-align:right"><b>Position:</b></td><td><a href="geo:'+lat+','+lon+'">'+lat+','+lon+'</a></td></tr>';
        geometry+='<tr><td style="text-align:right"><b>Elevation:</b></td><td> '+h+' m</dt></tr>';

    }

    /////// portrait //////////////////////////////////////
    let portrait='</br>';

    if(circumference!=''){
	portrait+='<tr><td style="text-align:right"><b>Umfang:</b></td><td>'+circumference+' m</td></tr>';
    }

    if(diameter_crown!=''){
	portrait+='<tr><td style="text-align:right"><b>Kronenedurchmesser:</b></td><td>'+diameter_crown+' m</td></tr>';
    }
    
    if(height!=''){
	portrait+='<tr><td style="text-align:right"><b>Höhe:</b></td><td>'+height+' m</td></tr>';
    }
    
    let typ;
    let quelle='';
    if(Vermehrungstyp != ''){
        portrait+='<tr><td style="text-align:right"><b>Vermehrungstyp:</b></td><td>';
	switch(Vermehrungstyp){
	    case 'N':
		typ='natürlich'
		break;
	    case 'U':
		typ='evtl. natürlich';
		break;
	    case 'P':
		typ='gepflanzt';
		break;
	    case 'TR':
		typ='gepflanzt';
		quelle='Reiser von '; 
		break;
	    case 'TS':
		typ='gepflanzt';
		quelle='Samen von '; 
		break;
	    default:
		typ='unbekannt';
		break;
       }
       portrait+=typ+'</td></tr>';

    }
    if(Herkunft!=''){

	let child=feature.geometry.coordinates;

// fix missing Herkunft
      if(geojsonObject[Herkunft]){
//

        let parent=geojsonObject[Herkunft];
        let pOrt=parent.properties.project.Ort;
        let pGebiet=parent.properties.project.Gebiet;
        let pCoords=parent.geometry.coordinates;



	//if(!parent.properties.progeny)parent.properties.progeny=[];
	//parent.properties.progeny.push(id);


	let item={ "type": "Feature",
		   "properties": { "progeny": id },
                   "geometry": {
                          "type": "LineString",
                          "coordinates": [
                                pCoords, child
        		  ]
       		     }

                 };
	geojsonRelative.features.push(item);


        portrait+='<tr><td style="text-align:right"><b>Herkunft:</b></td><td>'+
	quelle+'<span style="color:rgb(0,120,168)" onclick="map.setView(L.latLng('+pCoords[1]+','+pCoords[0]+'))">'+pOrt+'/'+pGebiet+'</span>'+
        //quelle+'<span style="color:rgb(0,120,168)" onclick="L.marker(L.latLng('+pCoords[1]+','+pCoords[0]+')).addTo(map);">'
        //+pOrt+'/'+pGebiet+'</span>'+
        '</td></tr>';

//endif fix
       }
//
    }

    if(Pflanzjahr!=''){
	portrait+='<tr><td style="text-align:right"><b>Pflanzjahr:</b></td><td>'+Pflanzjahr+'</td></tr>';
    }else{
        if(start_date!=''){
	     portrait+='<tr><td style="text-align:right"><b>Pflanzjahr:</b></td><td>'+start_date+'</td></tr>';
        } else{
           if(circumference!=''){
             let starter=Math.round(2024-circumference*100*1.0);
             let desc;
             if(Vermehrungstyp=="N" || Vermehrungstyp=="U"){
                 desc="gesch.&nbsp;Keimjahr";
             }else{
                 desc="gesch.&nbsp;Pflanzjahr";
             }   
	     portrait+='<tr><td style="text-align:right"><b>'+desc+':</b></td><td>~ '+starter+'</td></tr>';
           } 
        } 
    }

    if(Fruechte!=''){
	portrait+='<tr><td style="text-align:right"><b>Früchte:</b></td><td>'+Fruechte+'</td></tr>';
    }
    portrait+='</table>';

    ///// bilder //////
    let minWidth;
    let pics='';
    if(feature.properties.pictures){
	pics='<p>';
    	minWidth=300;
	let id=feature.id;
	let fpp=feature.properties.pictures;
	minWidth=fpp.length*105;
	if(minWidth>420)minWidth=420;
	pics='<div style="min-height:'+100*(Math.floor(fpp.length/5)+1)+'">\n';
	for(let i=0;i<fpp.length;i++){
	    let p=fpp[i];
	    let l;
	    if(i<100){
		l='<img width="100px" height="100px" src="'+id+'/thumbs/'+p+'">';
	    }else{
		l='.';
	    }	    
	    pics+='<a href="'+id+'/'+p+'" data-lightbox="1" data-title="'+p.split('.')[0]+'">'+l+'</a>\n';
	}
	pics+="</div></p>\n";
    }

    ///// osm ///////    
    let osm='<p style="width:100%;text-align:right;padding-right:10px">';
    if (feature.properties && feature.properties.id) {
        osm +='OSM: <a href="https://openstreetmap.org/node/'+feature.properties.id+'">/node/'+feature.properties.id+'</a>';
    }

    if(feature.properties.meta.user){
	osm+='&nbsp;&nbsp;<a href="https://www.openstreetmap.org/user/'+feature.properties.meta.user+'">/user/'+feature.properties.meta.user+'</a>';
    }
    osm+="</p>";

    ///// compose //////
    let content='<div style="padding:5px;background:#eeeeee">'+geometry+portrait+'</br>'+pics+osm+
		//'<span style="width:100%;text-align:right;padding-right:10px">'+
                 //'<button onclick="rohToggle(id)">Rohdaten</button>'+
                 //'</span>'+
		'</div>';
		 //+'<div style="display:none" id="'+id+'">'+tags+project+'</div>';
//let rohDiv='<div id="rohdaten" style="font-size:70%;display:block;transition:1s;width:300px;height:100%;background:white;opacity:0.8;position:absolute;top:0;right:0px">'+
  +tags+project+'</div>';                                                                                                                                              
 

    //rohSet(tags+project);

    let options={ maxWidth: 600, minWidth: minWidth, maxHeight: 400 };
    let popup=L.popup(options).setContent(content);
    layer.bindPopup(popup);
    
}


///////////////////////////////////////lightbox////////////////////////////////////////

lightbox.option({
      'resizeDuration': 200,
      'imageFadeDuration': 200,
      'fadeDuration': 600,
      'wrapAround': true
});

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////map/////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

var map = L.map('map').setView([47.7,8.0 ], 10);

//https://github.com/xtk93x/Leaflet.TileLayer.ColorFilter
let myFilter = [
    'blur:0px',
    'brightness:110%',
    'contrast:80%',
    'grayscale:100%',
    'hue:0deg',
    'opacity:90%',
    'invert:0%',
    'saturate:100%',
    'sepia:0%'
];


if(offline==true){
   // uses local scout server !!!!!!!!
   L.tileLayer('http://localhost:8553/v1/tile?style=pedestrian&daylight=1&scale=4&shift=0&z={z}&x={x}&y={y}', {
	maxZoom: 20,
        tileSize: 1024,
        zoomOffset: -2,
        detectRetina: true,
	attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
	'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
	'Imagery © <a href="https://github.com/rinigus/osmscout-server">OSM Scout Server</a>',
    }).addTo(map);
}else{
   L.tileLayer.colorFilter('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia</a>',
        filter: myFilter,
   }).addTo(map);
}

L.control.scale({imperial:false}).addTo(map);

var gps = new L.Control.Gps({
		//autoActive:true,
		autoCenter:true
	});//inizialize control

	gps
	.on('gps:located', function(e) {
		//	e.marker.bindPopup(e.latlng.toString()).openPopup()
		//console.log(e.latlng, map.getCenter())
	})
	.on('gps:disabled', function(e) {
		e.marker.closePopup()
	});

	gps.addTo(map);


//////////////////////////////////////////////gesojson layer////////////////////////////////////



let geojsonRelative={
  "type": "FeatureCollection",
  "features": []
}
 
let geojsonObject={};


function addGeojsonLayer(responseText){

    let geojsonLayer=JSON.parse(responseText);

    // make indexed geojsonObject
    for(let i=0;i<geojsonLayer.features.length;i++){
        let item=geojsonLayer.features[i];
        geojsonObject[item.properties.id]=item;
    }

    let trees=L.geoJSON(geojsonLayer, {
        //style: style,
        //filter: filter,
        onEachFeature: onEachFeature,
        pointToLayer: pointToLayer
    });

    let relative=L.geoJSON(geojsonRelative, {
        style: function(feature){return { opacity:0.15,color:"#000000" }}
        //filter: filter,
        //onEachFeature: onEachFeature,
        //pointToLayer: pointToLayer
    });

    relative.addTo(map);
    trees.addTo(map);
    stopSpinner();

}

function addGeojsonDistri(responseText){

    let geojsonLayer=JSON.parse(responseText);

    let distri=L.geoJSON(geojsonLayer, {
        style: function(feature){return { opacity:0.0,fillOpacity:0.09,color:"#004400" }}
        //filter: filter,
        //onEachFeature: onEachFeature,
        //pointToLayer: pointToLayer
    });

    distri.addTo(map);
}

function addGeojsonCliff(responseText){

    let geojsonLayer=JSON.parse(responseText);

    let cliff=L.geoJSON(geojsonLayer, {
        style: function(feature){return { opacity:0.5,fillOpacity:0.5,color:"#00ff00" }}
        //filter: filter,
        //onEachFeature: onEachFeature,
        //pointToLayer: pointToLayer
    });

    cliff.addTo(map);
}

function addGeojsonRect(responseText){

    let geojsonLayer=JSON.parse(responseText);

    let rect=L.geoJSON(geojsonLayer, {
        style: function(feature){return { fill:true,opacity:1.0,fillOpacity:0.05,color:"#111111",weight:0 }}
        //filter: filter,
        //onEachFeature: onEachFeature,
        //pointToLayer: pointToLayer
    });

    rect.addTo(map);
}

/*
function httpGet(theUrl, callback)
{
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous 
    xmlHttp.send(null);
}
*/

//httpGet('cliff+045+005.geojson', addGeojsonCliff);

httpGet('Rect.geojson', addGeojsonRect);

httpGet('Sorbus_domestica_plg.geojson', addGeojsonDistri);

httpGet('sorbusdomestica.geojson', addGeojsonLayer);



